{"version":3,"sources":["constant/index.js","context/CountryContext.js","components/NavBar/NavBar.js","components/Countries Board/Filter Menu Bar/FilterMenuBar.js","components/Countries Board/Countries Cards List/Card/Card.js","assets/loader/loader-dark.svg","assets/loader/loader-light.svg","components/Loader/Loader.js","components/Countries Board/Countries Cards List/Pagination/Pagination.js","components/NotFound/NotFound.js","components/Countries Board/Countries Cards List/CountryCardList.js","components/Countries Board/CountriesBoard.js","components/Country Details/utils.js","components/Country Details/Border Countries/BorderCountries.js","components/Country Details/CountryDetails.js","hooks/useFetchByName.js","components/App.js","hooks/useFetch.js","reportWebVitals.js","index.js"],"names":["INCREMENT","DECREMENT","CountryContext","React","createContext","NavBar","darkMode","toggleMode","homePage","className","to","onClick","FilterMenuBar","searchCountry","regionFilter","onSearchCountryChange","onRegionChange","scrollTo","useState","filterStatus","setFilterStatus","regionFilterRef","useRef","handleSideClick","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideClick","ref","type","placeholder","onChange","value","charAt","toUpperCase","slice","e","a","innerHTML","Card","capital","flags","name","population","region","common","style","backgroundImage","png","Numeral","format","Loader","loading","src","darkLoader","lightLoader","alt","handleScrollBar","scrollIntoView","behavior","onSetCurrentPage","setCurrentPage","currentPage","pageNumberStatus","middleSectionPagination","totalPages","srcollTo","undefined","firstNLastPage","secondNSecondLastPage","Pagination","disabled","NotFound","error","setCountryCards","filteredCountries","map","country","CountryCardList","countries","setTotalPages","tempTotalpages","length","Math","ceil","CountriesBoard","searchCountryText","setSearchCountryText","setRegion","setFilteredCountries","tempFilteredCountries","filter","toLowerCase","includes","updatedFilterdCountries","inputRegion","getNativeName","nativeName","Object","keys","key","getPopulation","getCapital","getTopDomain","tld","getCurrencies","currency","currencies","getLanguages","languages","push","toString","findBorders","countryDetail","borderCountries","borders","cca3","getCountryBorders","BorderCountries","CountryDetails","countryName","useParams","countryDetails","setCountryDetails","setLoading","setError","countryDetailsUrl","isMounted","fetchData","fetch","method","response","ok","json","then","data","Error","status","message","useFetchByName","useContext","subregion","App","setDarkMode","setCountries","useFetch","exact","path","element","Provider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wbAGaA,EAAY,YACZC,EAAY,Y,OCAVC,EAFQC,IAAMC,gB,eCiCdC,EAjCA,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACtC,OACE,mCACE,sBACEC,UAAS,2BACPH,EAAQ,qDAFZ,UAKE,cAAC,IAAD,CAAMI,GAAIF,EAAUC,UAAU,cAA9B,iCAIA,wBACEA,UAAS,yBACPH,EAAQ,qDAEVK,QAASJ,EAJX,SAMGD,EACC,qCACE,mBAAGG,UAAU,gBADf,iBAIA,qCACE,mBAAGA,UAAU,gBADf,wBC8EGG,G,MA3EO,SAAC,GAOhB,IANLC,EAMI,EANJA,cACAP,EAKI,EALJA,SACAQ,EAII,EAJJA,aACAC,EAGI,EAHJA,sBACAC,EAEI,EAFJA,eACAC,EACI,EADJA,SAEA,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAkBC,iBAAO,MAG/B,OA9BsB,SAACD,EAAiBD,GACxC,IAAMG,EAAkB,SAACC,GAErBH,EAAgBI,UACfJ,EAAgBI,QAAQC,SAASF,EAAMG,SAExCP,GAAgB,IAIpBQ,qBAAU,WAER,OADAC,SAASC,iBAAiB,YAAaP,GAChC,WACLM,SAASE,oBAAoB,YAAaR,OAe9CS,CAAgBX,EAAiBD,GAG/B,sBACEa,IAAKhB,EACLR,UAAS,+BAA0BH,EAAQ,gBAF7C,UAIE,uBAAMG,UAAWH,EAAQ,yCAAzB,UACE,mBAAGG,UAAU,kBACb,uBACE,cAAY,eACZyB,KAAK,OACLC,YAAY,iBACZC,SAAU,SAACZ,GAAD,OAAWT,EAAsBS,EAAMG,OAAOU,QACxDA,MAAOxB,OAIX,sBAAKJ,UAAU,eAAewB,IAAKZ,EAAnC,UACE,sBACEZ,UAAWH,EAAQ,yCACnBK,QAAS,kBAAMS,GAAiBD,IAFlC,UAIE,iCACGL,GACC,wBACEL,UACEH,EAAQ,yCAEVK,QAAS,kBAAMK,EAAe,KAJhC,SAME,mBAAGP,UAAU,mBAGhBK,EACGA,EAAawB,OAAO,GAAGC,cAAgBzB,EAAa0B,MAAM,GAC1D,sBAEN,mBACE/B,UAAS,4BACPU,EAAe,UAAY,kBAIhCA,GACC,qBACE,kBAAgB,iBAChBV,UAAWH,EAAQ,yCACnBK,QAAO,uCAAE,WAAO8B,GAAP,SAAAC,EAAA,sEACD1B,EAAeyB,EAAEd,OAAOgB,WADvB,OAEPvB,GAAiBD,GAFV,2CAAF,sDAHT,UAQE,wCACA,0CACA,sCACA,wCACA,oD,wBCpDGyB,G,MAvCF,SAAC,GAA4D,IAA1DC,EAAyD,EAAzDA,QAASvC,EAAgD,EAAhDA,SAAUwC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,OAC1D,OACE,cAAC,IAAD,CAAMvC,GAAE,yBAAoBqC,EAAKG,QAAjC,SACE,yBACEzC,UAAS,sBACPH,EAAQ,qDAFZ,UAKE,qBACE,cAAY,aACZG,UAAU,iBACV0C,MAAO,CAAEC,gBAAgB,OAAD,OAASN,EAAMO,IAAf,QAE1B,6BAAY5C,UAAU,gBAAtB,UACE,6BAAKsC,EAAKG,SACV,8CAEE,sBAAMzC,UAAWH,EAAW,WAAa,YAAzC,SACGgD,IAAQN,GAAYO,OAAO,EAAG,IAAM,iBAGzC,0CAEE,sBAAM9C,UAAWH,EAAW,WAAa,YAAzC,SACG2C,GAAU,iBAGf,4CAEE,sBAAMxC,UAAWH,EAAW,WAAa,YAAzC,SACGuC,GAAW,2BClCX,G,MAAA,IAA0B,yCCA1B,MAA0B,yCCiB1BW,EAbA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASnD,EAAe,EAAfA,SACzB,OACE,mCACGmD,GACC,qBACEhD,UAAU,SACViD,IAAKpD,EAAWqD,EAAaC,EAC7BC,IAAI,kBCPRC,G,MAAkB,SAAC7C,GACvBA,EAASQ,QAAQsC,eAAe,CAAEC,SAAU,aAGxCC,EAAmB,SACvBC,EACAC,EACAC,EACAnD,GAEA,OAAQmD,GACN,KAAKpE,EACH8D,EAAgB7C,GAChBiD,EAAeC,EAAc,GAC7B,MAEF,KAAKlE,EACH6D,EAAgB7C,GAChBiD,EAAeC,EAAc,KA+F7BE,EAA0B,SAC9BF,EACAG,EACAJ,EACAjD,GAIA,OAAQkD,EAAc,GACpB,KAAK,EACL,KAAKG,EACH,OA9FiB,SAACH,EAAaG,EAAYJ,EAAgBK,GAC/D,OACE,qCACE,wBACE5D,QACEwD,EAAc,IAAMG,EAChB,WACEJ,EAAe,GACfJ,EAAgBS,SAElBC,EAPR,eAaA,wBAAQ/D,UAAU,UAAlB,SACE,mBAAGA,UAAU,wBAEf,wBACEA,UAAW0D,EAAc,IAAMG,EAAa,gBAAaE,EACzD7D,QACEwD,EAAc,IAAM,EAChB,WACED,EAAeI,EAAa,GAC5BR,EAAgBS,SAElBC,EARR,SAWGF,OAgEIG,CAAeN,EAAaG,EAAYJ,EAAgBjD,GAEjE,KAAK,EACL,KAAKqD,EAAa,EAChB,OA1DwB,SAC5BH,EACAG,EACAJ,EACAjD,GAEA,OACE,qCACE,wBACEN,QAAS,WACPuD,EAAe,GACfJ,EAAgB7C,IAHpB,eAQCkD,EAAc,IAAM,EACnB,qCACE,wBAAQ1D,UAAU,WAAlB,eACA,wBAAQA,UAAU,UAAlB,SACE,mBAAGA,UAAU,2BAIjB,qCACE,wBAAQA,UAAU,UAAlB,SACE,mBAAGA,UAAU,wBAEf,wBAAQA,UAAU,WAAlB,SAA8B6D,EAAa,OAG/C,wBACE3D,QAAS,WACPuD,EAAeI,EAAa,GAC5BR,EAAgB7C,IAHpB,SAMGqD,OAqBII,CACLP,EACAG,EACAJ,EACAjD,GAGJ,QACE,OACE,qCACE,wBACEN,QAAS,WACPuD,EAAe,GACfJ,EAAgB7C,IAHpB,eAQA,wBAAQR,UAAU,UAAlB,SACE,mBAAGA,UAAU,wBAEf,wBAAQA,UAAU,WAAlB,SAA8B0D,EAAc,IAC5C,wBAAQ1D,UAAU,UAAlB,SACE,mBAAGA,UAAU,wBAEf,wBACEE,QAAS,WACPuD,EAAeI,EAAa,GAC5BR,EAAgB7C,IAHpB,SAMGqD,SA8CEK,EAtCI,SAAC,GAMb,IALLrE,EAKI,EALJA,SACA6D,EAII,EAJJA,YACAD,EAGI,EAHJA,eACAI,EAEI,EAFJA,WACArD,EACI,EADJA,SAEA,OACE,sBAAKR,UAAS,qBAAgBH,EAAQ,kBAAtC,UACE,wBACEK,QAAS,WACPsD,EAAiBC,EAAgBC,EAAalE,EAAWgB,IAE3D2D,SAA0B,IAAhBT,EAJZ,SAME,mBAAG1D,UAAU,wBAGd4D,EACCF,EACAG,EACAJ,EACAjD,GAGF,wBACER,UAAU,WACVE,QAAS,WACPsD,EAAiBC,EAAgBC,EAAanE,EAAWiB,IAE3D2D,SAAUT,EAAc,IAAMG,EALhC,SAOE,mBAAG7D,UAAU,4BClMNoE,G,YAPE,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOxE,EAAV,EAAUA,SAAV,OACf,uBAAMG,UAAS,uBAAkBH,EAAQ,gBAAzC,UACG,IADH,kCAEkCwE,OCE9BC,EAAkB,SAACC,EAAmBb,EAAa7D,GACvD,OAAO0E,EACJxC,MAAoB,EAAd2B,EAA+B,EAAdA,EAAkB,GACzCc,KAAI,SAACC,GAAD,OACH,cAAC,EAAD,2BAAoCA,GAApC,IAA6C5E,SAAUA,IAA5C4E,EAAQnC,KAAKG,YA6DfiC,EAzDS,SAAC,GAOlB,IANLH,EAMI,EANJA,kBACA1E,EAKI,EALJA,SACA8E,EAII,EAJJA,UACAnE,EAGI,EAHJA,SACAwC,EAEI,EAFJA,QACAqB,EACI,EADJA,MAEA,EAAsC5D,mBAAS,GAA/C,mBAAOiD,EAAP,KAAoBD,EAApB,KACA,EAAoChD,mBAAS,GAA7C,mBAAOoD,EAAP,KAAmBe,EAAnB,KAcA,OAZAzD,qBAAU,WACR,IAAI0D,EACFN,EAAkBO,OAAS,EACvBC,KAAKC,KAAKT,EAAkBO,OAAS,GACrC,EACNF,EAAcC,KACb,CAACN,IAEJpD,qBAAU,WACRsC,EAAe,KACd,CAACc,IAGF,qCACGF,GAAS,cAAC,EAAD,CAAUA,MAAOA,EAAOxE,SAAUA,IAE5C,yBAASG,UAAU,cAAnB,SACK2E,EAAUG,OACkB,IAA7BP,EAAkBO,OAChB,qCACE,8BACGR,EAAgBC,EAAmBb,EAAa7D,KAEnD,cAAC,EAAD,CACE6D,YAAaA,EACb7D,SAAUA,EACVW,SAAUA,EACViD,eAAgBA,EAChBI,WAAYA,OAIhB,oBAAG7D,UAAU,YAAb,0CAEE,uBAFF,uBAOFgD,GAAW,cAAC,EAAD,CAAQA,QAASA,EAASnD,SAAUA,UCiB1CoF,G,MA5EQ,SAAC,GAOjB,IANLN,EAMI,EANJA,UACA5E,EAKI,EALJA,SACAF,EAII,EAJJA,SACAC,EAGI,EAHJA,WACAkD,EAEI,EAFJA,QACAqB,EACI,EADJA,MAEA,EAAkD5D,mBAAS,IAA3D,mBAAOyE,EAAP,KAA0BC,EAA1B,KACA,EAA4B1E,mBAAS,IAArC,mBAAO+B,EAAP,KAAe4C,EAAf,KACA,EAAkD3E,mBAAS,MAA3D,mBAAO8D,EAAP,KAA0Bc,EAA1B,KACM7E,EAAWK,iBAAO,MAExBM,qBAAU,YAIwB,WAC9B,IAAImE,EAAwBX,EAAUY,QAAO,SAACd,GAC5C,OAAOA,EAAQnC,KAAKG,OACjB+C,cACAC,SAASP,EAAkBM,kBAE5BhD,IACF8C,EAAwBA,EAAsBC,QAAO,SAACd,GACpD,OAAOA,EAAQjC,OAAOgD,gBAAkBhD,EAAOgD,kBAGnDH,EAAqBC,GAEvBI,KACC,CAACR,EAAmB1C,EAAQmC,IAU/B,OACE,qCACE,yBAAQ3E,UAAU,iBAAlB,UACE,cAAC,EAAD,CACED,SAAUA,EACVF,SAAUA,EACVC,WAAYA,IAEd,cAAC,EAAD,CACEM,cAAe8E,EACfrF,SAAUA,EACVQ,aAAcmC,EACdlC,sBApBsB,SAACmE,GAC7BU,EAAqBV,IAoBflE,eAjBe,SAACoF,GACtBP,EAAUO,IAiBJnF,SAAUA,OAGd,sBACER,UAAS,+CACPH,EAAQ,gBAFZ,SAKE,cAAC,EAAD,CACE0E,kBAAmBA,GAAwCI,EAC3D9E,SAAUA,EACV8E,UAAWA,EACX3B,QAASA,EACTxC,SAAUA,EACV6D,MAAOA,WCzEJuB,EAAgB,SAACnB,GAC5B,IAAIoB,EAAa,GACjB,GAAIC,OAAOC,KAAKtB,EAAQnC,KAAKuD,YAAYf,OAAS,EAAG,CACnD,IAAIkB,EAAMF,OAAOC,KAAKtB,EAAQnC,KAAKuD,YACnCA,EAAapB,EAAQnC,KAAKuD,WAAWG,EAAI,IAAIvD,YACxC,GAAoD,IAAhDqD,OAAOC,KAAKtB,EAAQnC,KAAKuD,YAAYf,OAAc,CAC5D,IAAIkB,EAAMF,OAAOC,KAAKtB,EAAQnC,KAAKuD,YACnCA,EAAapB,EAAQnC,KAAKuD,WAAWG,GAAKvD,YAE1CoD,EAAa,YAEf,OAAOA,GAGII,EAAgB,SAACxB,GAC5B,OAAO5B,IAAQ4B,EAAQlC,YAAYO,OAAO,EAAG,IAGlCoD,EAAa,SAACzB,GAOzB,OALIA,EAAQrC,SACIqC,EAAQrC,QAAQ0C,OAASL,EAAQrC,QAAQ,GAEzC,aAKL+D,EAAe,SAAC1B,GAAa,IAAD,EACvC,OAAO,UAAAA,EAAQ2B,WAAR,eAAatB,QAASL,EAAQ2B,IAAI,GAAK,aAGnCC,EAAgB,SAAC5B,GAC5B,IAAI6B,EAAW,IACf,GAAIR,OAAOC,KAAKtB,EAAQ8B,YAAYzB,OAAQ,CAC1C,MAAYgB,OAAOC,KAAKtB,EAAQ8B,YAA3BP,EAAL,oBACAM,EAAQ,UAAM7B,EAAQ8B,WAAWP,GAAK1D,WAEtCgE,EAAW,YAEb,OAAOA,GAGIE,EAAe,SAAC/B,GAC3B,IAAIgC,EAAY,GAChB,IAAK,IAAIT,KAAOvB,EAAQgC,UACtBA,EAAUC,KAAKjC,EAAQgC,UAAUT,IAEnC,OAAOS,EAAUE,YCtCNC,G,MAAc,SAACjC,EAAWkC,EAAehH,EAAUE,GAC9D,IAAI+G,EDwC2B,SAACnC,EAAWkC,GAC3C,OAAOlC,EAAUY,QAAO,SAACd,GAAa,IAAD,EACnC,iBAAOoC,EAAcE,eAArB,aAAO,EAAuBtB,SAAShB,EAAQuC,SC1C3BC,CAAkBtC,EAAWkC,GAYnD,SAXAC,EAAkBA,EAAgBtC,KAAI,SAACC,GAAD,OACpC,cAAC,IAAD,CACExE,GAAE,UAAKF,EAAL,0BAA+B0E,EAAQnC,KAAKG,QAE9CzC,UACEH,EAAQ,oDAJZ,SAOG4E,EAAQnC,KAAKG,QALTgC,EAAQnC,KAAKG,YASFqC,QAChB,mCACE,uBAAM9E,UAAU,iBAAhB,8BAEE,oCAAO8G,YAOJI,EAAkB,SAAC,GAAgD,IAA9CzC,EAA6C,EAA7CA,QAASE,EAAoC,EAApCA,UAAW9E,EAAyB,EAAzBA,SAAUE,EAAe,EAAfA,SAC9D,OACE,qBAAKC,UAAS,0BAAqBH,EAAW,OAAS,SAAvD,SACG+G,EAAYjC,EAAWF,EAAS5E,EAAUE,MC+FlCoH,G,MAtHQ,SAAC,GAAwC,IAAD,IAArCtH,EAAqC,EAArCA,SAAUC,EAA2B,EAA3BA,WAAYC,EAAe,EAAfA,SACtCqH,EAAgBC,cAAhBD,YACR,EChB4B,SAAC9E,GAC7B,MAA4C7B,mBAAS,IAArD,mBAAO6G,EAAP,KAAuBC,EAAvB,KACA,EAA8B9G,oBAAS,GAAvC,mBAAOuC,EAAP,KAAgBwE,EAAhB,KACA,EAA0B/G,mBAAS,IAAnC,mBAAO4D,EAAP,KAAcoD,EAAd,KACMC,EAAiB,UfNO,sCeMP,YAA6BpF,GAC9CqF,EAAY9G,kBAAO,GAoCzB,OAlCAM,qBAAU,WACR,IAAMyG,EAAS,uCAAG,4BAAA3F,EAAA,6DAChB0F,EAAU3G,SAAU,EACpBwG,GAAW,GAFK,kBAISK,MAAMH,EAAmB,CAC9CI,OAAQ,QALI,UAIRC,EAJQ,QAQVJ,EAAU3G,QARA,qBASR+G,EAASC,GATD,iBAUVR,GAAW,GACXO,EAASE,OAAOC,MAAK,SAACC,GAElBZ,EflBiB,mCeiBfjF,EAEA6F,EAAK5C,QAAO,SAACd,GAAD,MAA8B,QAAjBA,EAAQuC,QAGjBmB,MAjBZ,8BAqBJ,IAAIC,MAAM,uBAAyBL,EAASM,QArBxC,0DAyBdZ,EAAS,KAAMa,SACfd,GAAW,GA1BG,0DAAH,qDA8Bf,OADAI,IACO,kBAAOD,EAAU3G,SAAU,KACjC,CAAC0G,EAAmBpF,IAEhB,CAAEgF,iBAAgBtE,UAASqB,SDzBSkE,CAAenB,GAAlDE,EAAR,EAAQA,eAAgBtE,EAAxB,EAAwBA,QAASqB,EAAjC,EAAiCA,MAC1BI,EAAP,YAAkB6C,EAAlB,MACQ3C,EAAc6D,qBAAW/I,GAAzBkF,UAER,OACE,qCACE,yBAAQ3E,UAAS,yBAAoBH,EAAQ,gBAA7C,UACE,cAAC,EAAD,CACEA,SAAUA,EACVE,SAAUA,EACVD,WAAYA,IAEd,eAAC,IAAD,CACEG,GAAIF,EACJC,UAAS,kBACPH,EAAW,yBAA2B,4BAH1C,UAME,mBAAGG,UAAU,sBANf,aAUF,uBAAMA,UAAS,wBAAmBH,EAAQ,gBAA1C,WACImD,IAAYsE,EAAexC,QAAUT,GACrC,mBAAGrE,UAAU,QAAb,qCAGDsH,GAAoBA,EAAexC,OAClC,qCACE,qBAAK9E,UAAU,cAAf,SACE,qBACEiD,IAAG,UAAEwB,EAAQpC,aAAV,aAAE,EAAeO,IACpBQ,IAAG,oBAAKqB,EAAQnC,YAAb,aAAK,EAAcG,OAAnB,aAGP,sBAAKzC,UAAU,iBAAf,UACE,6BAAKoH,IACL,sBAAKpH,UAAU,mBAAf,UACE,sBAAKA,UAAU,cAAf,UACE,6CACe,IACb,sBAAMA,UAAWH,EAAW,cAAgB,eAA5C,SACG+F,EAAcnB,QAGnB,4CACc,IACZ,sBAAMzE,UAAWH,EAAW,cAAgB,eAA5C,SACGoG,EAAcxB,QAGnB,wCACU,IACR,uBAAMzE,UAAWH,EAAW,cAAgB,eAA5C,UACG,IACA4E,EAAQjC,aAIb,4CACc,IACZ,uBAAMxC,UAAWH,EAAW,cAAgB,eAA5C,UACG,IACA4E,EAAQgE,gBAGb,yCACW,IACT,uBAAMzI,UAAWH,EAAW,cAAgB,eAA5C,UACG,IACAqG,EAAWzB,YAIlB,sBAAKzE,UAAU,oBAAf,UACE,kDACoB,IAClB,sBAAMA,UAAWH,EAAW,cAAgB,eAA5C,SACGsG,EAAa1B,QAGlB,4CACc,IACZ,uBAAMzE,UAAWH,EAAW,cAAgB,eAA5C,UACG,IACAwG,EAAc5B,SAGnB,oBAAGzE,UAAU,YAAb,uBACa,IACX,sBAAMA,UAAWH,EAAW,cAAgB,eAA5C,SACG2G,EAAa/B,cAKrBA,GACC,cAAC,EAAD,CACEA,QAASA,EACT5E,SAAUA,EACVE,SAAUA,EACV4E,UAAWA,UAMnB,qBAAK3E,UAAU,aAAf,SACGgD,GAAW,cAAC,EAAD,CAAQA,QAASA,EAASnD,SAAUA,cEpE7C6I,G,MAlDH,WACV,MAAgCjI,oBAAS,GAAzC,mBAAOZ,EAAP,KAAiB8I,EAAjB,KACA,ECRsB,WACtB,MAAkClI,mBAAS,IAA3C,mBAAOkE,EAAP,KAAkBiE,EAAlB,KACA,EAA8BnI,oBAAS,GAAvC,mBAAOuC,EAAP,KAAgBwE,EAAhB,KACA,EAA0B/G,mBAAS,IAAnC,mBAAO4D,EAAP,KAAcoD,EAAd,KA2BA,OAzBAtG,qBAAU,WACR,IAAMyG,EAAS,uCAAG,4BAAA3F,EAAA,6DAChBuF,GAAW,GADK,kBAGSK,MjBZG,qCiBYuB,CAC/CC,OAAQ,QAJI,YAGRC,EAHQ,QAODC,GAPC,iBAQZR,GAAW,GACXO,EAASE,OAAOC,MAAK,SAACC,GACpBS,EAAaT,MAVH,8BAaN,IAAIC,MAAM,uBAAyBL,EAASM,QAbtC,0DAgBdZ,EAAS,KAAMa,SACfd,GAAW,GAjBG,0DAAH,qDAqBfI,MACC,IAEI,CAAEjD,YAAW3B,UAASqB,SDtBSwE,GAA9BlE,EAAR,EAAQA,UAAW3B,EAAnB,EAAmBA,QAASqB,EAA5B,EAA4BA,MAMtBvE,EAAa,WACjB6I,GAAa9I,IAGf,OACE,mCAEI,eAAC,IAAD,WACE,cAAC,IAAD,CACEiJ,OAAK,EACLC,KAAK,IACLC,QACE,cAAC,EAAD,CACElJ,WAAYA,EACZD,SAAUA,EACVE,ShB3BQ,IgB4BR4E,UAAWA,EACX3B,QAASA,EACTqB,MAAOA,MAIb,cAAC,IAAD,CACE0E,KAAK,+BACLC,QACE,cAAC,EAAeC,SAAhB,CAAyBrH,MAAO,CAAE+C,aAAlC,SACE,cAAC,EAAD,CACE7E,WAAYA,EACZD,SAAUA,EACVE,ShBzCM,IgB0CNiD,QAASA,QAKjB,cAAC,IAAD,CAAO+F,KAAK,IAAIC,QAAS,cAAC,IAAD,CAAU/I,GhB/CrB,ekBOTiJ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJxI,SAASyI,eAAe,SAM1BX,M","file":"static/js/main.940603ef.chunk.js","sourcesContent":["export const REST_COUNTRIES_URL = 'https://restcountries.com/v3.1/all';\nexport const COUNTRY_DETAILS_URL = `https://restcountries.com/v3.1/name`;\n\nexport const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';\nexport const homePage = '/';\nexport const BRITISH_TERRITORY = 'British Indian Ocean Territory';\n","import React from 'react';\n\nconst CountryContext = React.createContext();\n\nexport default CountryContext;\n","import { Link } from 'react-router-dom';\nimport './NavBar.scss';\nconst NavBar = ({ darkMode, toggleMode, homePage }) => {\n  return (\n    <>\n      <nav\n        className={`container navBar ${\n          darkMode ? `dark darkThemeElements` : `light lightThemeElements`\n        }`}\n      >\n        <Link to={homePage} className='primaryBold'>\n          Where in the world?\n        </Link>\n\n        <button\n          className={`secondaryBold  ${\n            darkMode ? `dark darkThemeElements` : `light lightThemeElements`\n          }`}\n          onClick={toggleMode}\n        >\n          {darkMode ? (\n            <>\n              <i className='fas fa-moon'></i> Light Mode\n            </>\n          ) : (\n            <>\n              <i className='far fa-moon'></i> Dark Mode\n            </>\n          )}\n        </button>\n      </nav>\n    </>\n  );\n};\n\nexport default NavBar;\n","import React, { useState, useRef, useEffect } from 'react';\nimport './FilterMenuBar.scss';\n\n/**\n * Method is used for handled outside click when click on filter selection.\n * sets state for filter status\n * @param {*} regionFilterRef\n * @param {*} setFilterStatus\n */\n\nconst useOutsideClick = (regionFilterRef, setFilterStatus) => {\n  const handleSideClick = (event) => {\n    if (\n      regionFilterRef.current &&\n      !regionFilterRef.current.contains(event.target)\n    ) {\n      setFilterStatus(false);\n    }\n  };\n\n  useEffect(() => {\n    document.addEventListener('mousedown', handleSideClick);\n    return () => {\n      document.removeEventListener('mousedown', handleSideClick);\n    };\n  });\n};\n\nconst FilterMenuBar = ({\n  searchCountry,\n  darkMode,\n  regionFilter,\n  onSearchCountryChange,\n  onRegionChange,\n  scrollTo,\n}) => {\n  const [filterStatus, setFilterStatus] = useState(false);\n  const regionFilterRef = useRef(null);\n  useOutsideClick(regionFilterRef, setFilterStatus);\n\n  return (\n    <div\n      ref={scrollTo}\n      className={`filterMenu container ${darkMode ? `dark` : `light`}`}\n    >\n      <span className={darkMode ? `darkThemeElements` : `lightThemeElements`}>\n        <i className='fas fa-search'></i>\n        <input\n          data-testid='search-input'\n          type='text'\n          placeholder='Search Country'\n          onChange={(event) => onSearchCountryChange(event.target.value)}\n          value={searchCountry}\n        />\n      </span>\n\n      <div className='regionFilter' ref={regionFilterRef}>\n        <div\n          className={darkMode ? `darkThemeElements` : `lightThemeElements`}\n          onClick={() => setFilterStatus(!filterStatus)}\n        >\n          <span>\n            {regionFilter && (\n              <button\n                className={\n                  darkMode ? `darkThemeElements` : `lightThemeElements`\n                }\n                onClick={() => onRegionChange('')}\n              >\n                <i className='fas fa-times'></i>\n              </button>\n            )}\n            {regionFilter\n              ? regionFilter.charAt(0).toUpperCase() + regionFilter.slice(1)\n              : 'Filter by Region'}\n          </span>\n          <i\n            className={`fas fa-arrow-left ${\n              filterStatus ? 'arrowUp' : 'arrowDown'\n            }`}\n          ></i>\n        </div>\n        {filterStatus && (\n          <ul\n            aria-labelledby='fruits-heading'\n            className={darkMode ? `darkThemeElements` : `lightThemeElements`}\n            onClick={async (e) => {\n              await onRegionChange(e.target.innerHTML);\n              setFilterStatus(!filterStatus);\n            }}\n          >\n            <li>africa</li>\n            <li>americas</li>\n            <li>asia</li>\n            <li>europe</li>\n            <li>oceania</li>\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FilterMenuBar;\n","import { Link } from 'react-router-dom';\nimport Numeral from 'numeral';\nimport './Card.scss';\n\nconst Card = ({ capital, darkMode, flags, name, population, region }) => {\n  return (\n    <Link to={`countryDetails/${name.common}`}>\n      <figure\n        className={`countryCard ${\n          darkMode ? `dark darkThemeElements` : `light lightThemeElements`\n        }`}\n      >\n        <div\n          data-testid='flag-image'\n          className='cardBackground'\n          style={{ backgroundImage: `url(${flags.png})` }}\n        ></div>\n        <figcaption className='textContainer'>\n          <h2>{name.common}</h2>\n          <div>\n            Population:\n            <span className={darkMode ? 'darkText' : 'lightText'}>\n              {Numeral(population).format(0, 0) || 'Not Found'}\n            </span>\n          </div>\n          <div>\n            Region:\n            <span className={darkMode ? 'darkText' : 'lightText'}>\n              {region || 'Not Found'}\n            </span>\n          </div>\n          <div>\n            Capital :\n            <span className={darkMode ? 'darkText' : 'lightText'}>\n              {capital || 'Not Found'}\n            </span>\n          </div>\n        </figcaption>\n      </figure>\n    </Link>\n  );\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/loader-dark.0f91fa5c.svg\";","export default __webpack_public_path__ + \"static/media/loader-light.f86e6db9.svg\";","import './Loader.scss';\nimport darkLoader from '../../assets/loader/loader-dark.svg';\nimport lightLoader from '../../assets/loader/loader-light.svg';\n\nconst Loader = ({ loading, darkMode }) => {\n  return (\n    <>\n      {loading && (\n        <img\n          className='loader'\n          src={darkMode ? darkLoader : lightLoader}\n          alt='loading...'\n        />\n      )}\n    </>\n  );\n};\nexport default Loader;\n","import React from 'react';\nimport { INCREMENT, DECREMENT } from '../../../../constant';\nimport './Pagination.scss';\n\nconst handleScrollBar = (scrollTo) => {\n  scrollTo.current.scrollIntoView({ behavior: 'smooth' });\n};\n\nconst onSetCurrentPage = (\n  setCurrentPage,\n  currentPage,\n  pageNumberStatus,\n  scrollTo\n) => {\n  switch (pageNumberStatus) {\n    case INCREMENT: {\n      handleScrollBar(scrollTo);\n      setCurrentPage(currentPage + 1);\n      break;\n    }\n    case DECREMENT: {\n      handleScrollBar(scrollTo);\n      setCurrentPage(currentPage - 1);\n      break;\n    }\n    default:\n      break;\n  }\n};\n\n/**\n *  Create Pagination for first and last page\n */\n\nconst firstNLastPage = (currentPage, totalPages, setCurrentPage, srcollTo) => {\n  return (\n    <>\n      <button\n        onClick={\n          currentPage + 1 === totalPages\n            ? () => {\n                setCurrentPage(0);\n                handleScrollBar(srcollTo);\n              }\n            : undefined\n        }\n      >\n        1\n      </button>\n\n      <button className='elipsis'>\n        <i className='fas fa-ellipsis-h'></i>\n      </button>\n      <button\n        className={currentPage + 1 === totalPages ? 'isActive' : undefined}\n        onClick={\n          currentPage + 1 === 1\n            ? () => {\n                setCurrentPage(totalPages - 1);\n                handleScrollBar(srcollTo);\n              }\n            : undefined\n        }\n      >\n        {totalPages}\n      </button>\n    </>\n  );\n};\n\n/**\n *  Create Pagination for second and secondLast\n */\n\nconst secondNSecondLastPage = (\n  currentPage,\n  totalPages,\n  setCurrentPage,\n  scrollTo\n) => {\n  return (\n    <>\n      <button\n        onClick={() => {\n          setCurrentPage(0);\n          handleScrollBar(scrollTo);\n        }}\n      >\n        1\n      </button>\n      {currentPage + 1 === 2 ? (\n        <>\n          <button className='isActive'>2</button>\n          <button className='elipsis'>\n            <i className='fas fa-ellipsis-h'></i>\n          </button>\n        </>\n      ) : (\n        <>\n          <button className='elipsis'>\n            <i className='fas fa-ellipsis-h'></i>\n          </button>\n          <button className='isActive'>{totalPages - 1}</button>\n        </>\n      )}\n      <button\n        onClick={() => {\n          setCurrentPage(totalPages - 1);\n          handleScrollBar(scrollTo);\n        }}\n      >\n        {totalPages}\n      </button>\n    </>\n  );\n};\n\nconst middleSectionPagination = (\n  currentPage,\n  totalPages,\n  setCurrentPage,\n  scrollTo\n) => {\n  totalPages === 1 && <button className='isActive'>1</button>;\n\n  switch (currentPage + 1) {\n    case 1:\n    case totalPages: {\n      return firstNLastPage(currentPage, totalPages, setCurrentPage, scrollTo);\n    }\n    case 2:\n    case totalPages - 1: {\n      return secondNSecondLastPage(\n        currentPage,\n        totalPages,\n        setCurrentPage,\n        scrollTo\n      );\n    }\n    default: {\n      return (\n        <>\n          <button\n            onClick={() => {\n              setCurrentPage(0);\n              handleScrollBar(scrollTo);\n            }}\n          >\n            1\n          </button>\n          <button className='elipsis'>\n            <i className='fas fa-ellipsis-h'></i>\n          </button>\n          <button className='isActive'>{currentPage + 1}</button>\n          <button className='elipsis'>\n            <i className='fas fa-ellipsis-h'></i>\n          </button>\n          <button\n            onClick={() => {\n              setCurrentPage(totalPages - 1);\n              handleScrollBar(scrollTo);\n            }}\n          >\n            {totalPages}\n          </button>\n        </>\n      );\n    }\n  }\n};\n\nconst Pagination = ({\n  darkMode,\n  currentPage,\n  setCurrentPage,\n  totalPages,\n  scrollTo,\n}) => {\n  return (\n    <div className={`pagination ${darkMode ? `dark ` : `light `}`}>\n      <button\n        onClick={() => {\n          onSetCurrentPage(setCurrentPage, currentPage, DECREMENT, scrollTo);\n        }}\n        disabled={currentPage === 0}\n      >\n        <i className='fas fa-arrow-left'></i>\n      </button>\n\n      {middleSectionPagination(\n        currentPage,\n        totalPages,\n        setCurrentPage,\n        scrollTo\n      )}\n\n      <button\n        className='nextPage'\n        onClick={() => {\n          onSetCurrentPage(setCurrentPage, currentPage, INCREMENT, scrollTo);\n        }}\n        disabled={currentPage + 1 === totalPages}\n      >\n        <i className='fas fa-arrow-left'></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import './NotFound.scss';\n\nconst NotFound = ({ error, darkMode }) => (\n  <main className={`notFoundPage ${darkMode ? `dark` : `light`}`}>\n    {' '}\n    \"Please try again in sometime\" {error}\n  </main>\n);\n\nexport default NotFound;\n","import { useState, useEffect } from 'react';\nimport Card from './Card/Card';\nimport Loader from '../../Loader/Loader';\nimport Pagination from './Pagination/Pagination';\nimport './CountryCardList.scss';\nimport NotFound from '../../NotFound/NotFound';\n\nconst setCountryCards = (filteredCountries, currentPage, darkMode) => {\n  return filteredCountries\n    .slice(currentPage * 8, currentPage * 8 + 8)\n    .map((country) => (\n      <Card key={country.name.common} {...country} darkMode={darkMode} />\n    ));\n};\n\nconst CountryCardList = ({\n  filteredCountries,\n  darkMode,\n  countries,\n  scrollTo,\n  loading,\n  error,\n}) => {\n  const [currentPage, setCurrentPage] = useState(0);\n  const [totalPages, setTotalPages] = useState(1);\n\n  useEffect(() => {\n    let tempTotalpages =\n      filteredCountries.length > 8\n        ? Math.ceil(filteredCountries.length / 8)\n        : 1;\n    setTotalPages(tempTotalpages);\n  }, [filteredCountries]);\n\n  useEffect(() => {\n    setCurrentPage(0);\n  }, [filteredCountries]);\n\n  return (\n    <>\n      {error && <NotFound error={error} darkMode={darkMode} />}\n\n      <section className='countryList'>\n        {!!countries.length ? (\n          filteredCountries.length !== 0 ? (\n            <>\n              <div>\n                {setCountryCards(filteredCountries, currentPage, darkMode)}\n              </div>\n              <Pagination\n                currentPage={currentPage}\n                darkMode={darkMode}\n                scrollTo={scrollTo}\n                setCurrentPage={setCurrentPage}\n                totalPages={totalPages}\n              />\n            </>\n          ) : (\n            <p className='showError'>\n              Ooops!!! You Enter Wrong Text\n              <br />\n              Try Something New\n            </p>\n          )\n        ) : (\n          loading && <Loader loading={loading} darkMode={darkMode} />\n        )}\n      </section>\n    </>\n  );\n};\n\nexport default CountryCardList;\n","import { useState, useRef, useEffect } from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport FilterMenuBar from './Filter Menu Bar/FilterMenuBar';\nimport CountryCardList from './Countries Cards List/CountryCardList';\nimport './CountriesBoard.scss';\n\nconst CountriesBoard = ({\n  countries,\n  homePage,\n  darkMode,\n  toggleMode,\n  loading,\n  error,\n}) => {\n  const [searchCountryText, setSearchCountryText] = useState('');\n  const [region, setRegion] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState(null);\n  const scrollTo = useRef(null);\n\n  useEffect(() => {\n    /**\n     *  Method updated countries based on seach input and region selection\n     */\n    const updatedFilterdCountries = () => {\n      let tempFilteredCountries = countries.filter((country) => {\n        return country.name.common\n          .toLowerCase()\n          .includes(searchCountryText.toLowerCase());\n      });\n      if (region) {\n        tempFilteredCountries = tempFilteredCountries.filter((country) => {\n          return country.region.toLowerCase() === region.toLowerCase();\n        });\n      }\n      setFilteredCountries(tempFilteredCountries);\n    };\n    updatedFilterdCountries();\n  }, [searchCountryText, region, countries]);\n\n  const onSearchCountryChange = (country) => {\n    setSearchCountryText(country);\n  };\n\n  const onRegionChange = (inputRegion) => {\n    setRegion(inputRegion);\n  };\n\n  return (\n    <>\n      <header className='countriesBoard'>\n        <NavBar\n          homePage={homePage}\n          darkMode={darkMode}\n          toggleMode={toggleMode}\n        />\n        <FilterMenuBar\n          searchCountry={searchCountryText}\n          darkMode={darkMode}\n          regionFilter={region}\n          onSearchCountryChange={onSearchCountryChange}\n          onRegionChange={onRegionChange}\n          scrollTo={scrollTo}\n        />\n      </header>\n      <main\n        className={`container countriesBoard innerHeight ${\n          darkMode ? `dark` : `light`\n        }`}\n      >\n        <CountryCardList\n          filteredCountries={filteredCountries ? filteredCountries : countries}\n          darkMode={darkMode}\n          countries={countries}\n          loading={loading}\n          scrollTo={scrollTo}\n          error={error}\n        />\n      </main>\n    </>\n  );\n};\n\nexport default CountriesBoard;\n","import Numeral from 'numeral';\n\nexport const getNativeName = (country) => {\n  let nativeName = '';\n  if (Object.keys(country.name.nativeName).length > 1) {\n    let key = Object.keys(country.name.nativeName);\n    nativeName = country.name.nativeName[key[0]].common;\n  } else if (Object.keys(country.name.nativeName).length === 1) {\n    let key = Object.keys(country.name.nativeName);\n    nativeName = country.name.nativeName[key].common;\n  } else {\n    nativeName = 'Not Found';\n  }\n  return nativeName;\n};\n\nexport const getPopulation = (country) => {\n  return Numeral(country.population).format(0, 0);\n};\n\nexport const getCapital = (country) => {\n  let capitalName = '';\n  if (country.capital) {\n    capitalName = country.capital.length ? country.capital[0] : 'Not Found';\n  } else {\n    capitalName = 'Not Found';\n  }\n  return capitalName;\n};\n\nexport const getTopDomain = (country) => {\n  return country.tld?.length ? country.tld[0] : 'Not Found';\n};\n\nexport const getCurrencies = (country) => {\n  let currency = ' ';\n  if (Object.keys(country.currencies).length) {\n    let [key] = Object.keys(country.currencies);\n    currency = `${country.currencies[key].name}`;\n  } else {\n    currency = 'Not Found';\n  }\n  return currency;\n};\n\nexport const getLanguages = (country) => {\n  let languages = [];\n  for (let key in country.languages) {\n    languages.push(country.languages[key]);\n  }\n  return languages.toString();\n};\n\nexport const getCountryBorders = (countries, countryDetail) => {\n  return countries.filter((country) => {\n    return countryDetail.borders?.includes(country.cca3);\n  });\n};\n","import { Link } from 'react-router-dom';\nimport { getCountryBorders } from '../utils';\nimport './BorderCountries.scss';\n\n/**\n *  Method finds country borders based on cca3 code\n * @param {*} countries\n * @param {*} countryDetail\n * @param {*} darkMode\n * @param {*} homePage\n */\n\nexport const findBorders = (countries, countryDetail, darkMode, homePage) => {\n  let borderCountries = getCountryBorders(countries, countryDetail);\n  borderCountries = borderCountries.map((country) => (\n    <Link\n      to={`${homePage}countryDetails/${country.name.common}`}\n      key={country.name.common}\n      className={\n        darkMode ? `dark darkThemeElements` : `light lightThemeElements`\n      }\n    >\n      {country.name.common}\n    </Link>\n  ));\n  return (\n    !!borderCountries.length && (\n      <>\n        <span className='bordersDisplay'>\n          Border Countries:\n          <div> {borderCountries}</div>\n        </span>\n      </>\n    )\n  );\n};\n\nexport const BorderCountries = ({ country, countries, darkMode, homePage }) => {\n  return (\n    <div className={`borderCountries ${darkMode ? 'dark' : 'light'}`}>\n      {findBorders(countries, country, darkMode, homePage)}\n    </div>\n  );\n};\n","import { useContext } from 'react';\nimport CountryContext from '../../context/CountryContext';\nimport { Link, useParams } from 'react-router-dom';\nimport NavBar from '../NavBar/NavBar';\nimport Loader from '../Loader/Loader';\nimport {\n  getNativeName,\n  getPopulation,\n  getCapital,\n  getTopDomain,\n  getLanguages,\n  getCurrencies,\n} from './utils';\nimport { BorderCountries } from './Border Countries/BorderCountries';\nimport { useFetchByName } from '../../hooks/useFetchByName';\nimport './CountryDetails.scss';\n\nconst CountryDetails = ({ darkMode, toggleMode, homePage }) => {\n  const { countryName } = useParams();\n  const { countryDetails, loading, error } = useFetchByName(countryName);\n  const [country] = countryDetails;\n  const { countries } = useContext(CountryContext);\n\n  return (\n    <>\n      <header className={`countryDetails ${darkMode ? `dark` : `light`}`}>\n        <NavBar\n          darkMode={darkMode}\n          homePage={homePage}\n          toggleMode={toggleMode}\n        />\n        <Link\n          to={homePage}\n          className={`backBtn ${\n            darkMode ? 'dark darkThemeElements' : 'light lightThemeElements'\n          }`}\n        >\n          <i className='fas fa-arrow-left'></i>\n          Back\n        </Link>\n      </header>\n      <main className={`mainContainer ${darkMode ? `dark` : `light`}`}>\n        {!loading && !countryDetails.length && error && (\n          <p className='error'>Sorry country not found</p>\n        )}\n\n        {countryDetails && !!countryDetails.length ? (\n          <>\n            <div className='countryFlag'>\n              <img\n                src={country.flags?.png}\n                alt={`${country.name?.common} flag`}\n              />\n            </div>\n            <div className='countryDetails'>\n              <h1>{countryName}</h1>\n              <div className='detailsContainer'>\n                <div className='mainDetails'>\n                  <p>\n                    Native Name:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {getNativeName(country)}\n                    </span>\n                  </p>\n                  <p>\n                    Population:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {getPopulation(country)}\n                    </span>\n                  </p>\n                  <p>\n                    Region:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {' '}\n                      {country.region}\n                    </span>\n                  </p>\n\n                  <p>\n                    Sub Region:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {' '}\n                      {country.subregion}\n                    </span>\n                  </p>\n                  <p>\n                    Capital:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {' '}\n                      {getCapital(country)}\n                    </span>\n                  </p>\n                </div>\n                <div className='additionalDetails'>\n                  <p>\n                    Top Level Domain:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {getTopDomain(country)}\n                    </span>\n                  </p>\n                  <p>\n                    Currencies:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {' '}\n                      {getCurrencies(country)}\n                    </span>\n                  </p>\n                  <p className='languages'>\n                    Languages:{' '}\n                    <span className={darkMode ? 'darkDetails' : 'lightDetails'}>\n                      {getLanguages(country)}\n                    </span>\n                  </p>\n                </div>\n              </div>\n              {country && (\n                <BorderCountries\n                  country={country}\n                  darkMode={darkMode}\n                  homePage={homePage}\n                  countries={countries}\n                />\n              )}\n            </div>\n          </>\n        ) : (\n          <div className='mainLoader'>\n            {loading && <Loader loading={loading} darkMode={darkMode} />}\n          </div>\n        )}\n      </main>\n    </>\n  );\n};\n\nexport default CountryDetails;\n","import { useEffect, useState, useRef } from 'react';\nimport { COUNTRY_DETAILS_URL, BRITISH_TERRITORY } from '../constant';\n\nexport const useFetchByName = (name) => {\n  const [countryDetails, setCountryDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const countryDetailsUrl = `${COUNTRY_DETAILS_URL}/${name}`;\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      isMounted.current = true;\n      setLoading(true);\n      try {\n        const response = await fetch(countryDetailsUrl, {\n          method: 'GET',\n        });\n\n        if (isMounted.current) {\n          if (response.ok) {\n            setLoading(false);\n            response.json().then((data) => {\n              if (name === BRITISH_TERRITORY) {\n                setCountryDetails(\n                  data.filter((country) => country.cca3 === 'IOT')\n                );\n              } else {\n                setCountryDetails(data);\n              }\n            });\n          } else {\n            throw new Error('Something went wrong' + response.status);\n          }\n        }\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    fetchData();\n    return () => (isMounted.current = false);\n  }, [countryDetailsUrl, name]);\n\n  return { countryDetails, loading, error };\n};\n","import { useState } from 'react';\nimport { useFetch } from '../hooks/useFetch';\nimport { Route, Routes, Navigate } from 'react-router-dom';\nimport { homePage } from '../constant';\nimport CountryContext from '../context/CountryContext';\nimport CountriesBoard from './Countries Board/CountriesBoard';\nimport CountryDetails from './Country Details/CountryDetails';\nimport './App.scss';\n\nconst App = () => {\n  const [darkMode, setDarkMode] = useState(true);\n  const { countries, loading, error } = useFetch();\n\n  /**\n   *  Method reverse mode to dark to light based on current mode.\n   */\n\n  const toggleMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <>\n      {\n        <Routes>\n          <Route\n            exact\n            path='/'\n            element={\n              <CountriesBoard\n                toggleMode={toggleMode}\n                darkMode={darkMode}\n                homePage={homePage}\n                countries={countries}\n                loading={loading}\n                error={error}\n              />\n            }\n          />\n          <Route\n            path='/countryDetails/:countryName'\n            element={\n              <CountryContext.Provider value={{ countries }}>\n                <CountryDetails\n                  toggleMode={toggleMode}\n                  darkMode={darkMode}\n                  homePage={homePage}\n                  loading={loading}\n                />\n              </CountryContext.Provider>\n            }\n          />\n          <Route path='*' element={<Navigate to={homePage} />} />\n        </Routes>\n      }\n    </>\n  );\n};\n\nexport default App;\n","import { useEffect, useState } from 'react';\nimport { REST_COUNTRIES_URL } from '../constant';\n\nexport const useFetch = () => {\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(REST_COUNTRIES_URL, {\n          method: 'GET',\n        });\n\n        if (response.ok) {\n          setLoading(false);\n          response.json().then((data) => {\n            setCountries(data);\n          });\n        } else {\n          throw new Error('Something went wrong' + response.status);\n        }\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return { countries, loading, error };\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}