{"ast":null,"code":"var _jsxFileName = \"/Users/aniketbhavsar/Desktop/Code Challenage/MAYD/search-you-country/src/components/Countries Board/CountriesBoard.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport FilterMenuBar from './Filter Menu Bar/FilterMenuBar';\nimport CountryCardList from './Countries Cards List/CountryCardList';\nimport './CountriesBoard.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CountriesBoard = _ref => {\n  _s();\n\n  let {\n    countries,\n    homePage,\n    darkMode,\n    toggleMode,\n    loading,\n    error\n  } = _ref;\n  const [searchCountryText, setSearchCountryText] = useState('');\n  const [region, setRegion] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState(null);\n  const scrollTo = useRef(null);\n  useEffect(() => {\n    /**\n     *  Method updated countries based on seach input and region selection\n     */\n    const updatedFilterdCountries = () => {\n      let tempFilteredCountries = countries.filter(country => {\n        return country.name.common.toLowerCase().includes(searchCountryText.toLowerCase());\n      });\n\n      if (region) {\n        tempFilteredCountries = tempFilteredCountries.filter(country => {\n          return country.region.toLowerCase() === region.toLowerCase();\n        });\n      }\n\n      setFilteredCountries(tempFilteredCountries);\n    };\n\n    updatedFilterdCountries();\n  }, [searchCountryText, region, countries]);\n\n  const onSearchCountryChange = country => {\n    setSearchCountryText(country);\n  };\n\n  const onRegionChange = inputRegion => {\n    setRegion(inputRegion);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"countriesBoard\",\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        homePage: homePage,\n        darkMode: darkMode,\n        toggleMode: toggleMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterMenuBar, {\n        searchCountry: searchCountryText,\n        darkMode: darkMode,\n        regionFilter: region,\n        onSearchCountryChange: onSearchCountryChange,\n        onRegionChange: onRegionChange,\n        scrollTo: scrollTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: `container countriesBoard innerHeight ${darkMode ? `dark` : `light`}`,\n      children: /*#__PURE__*/_jsxDEV(CountryCardList, {\n        filteredCountries: filteredCountries ? filteredCountries : countries,\n        darkMode: darkMode,\n        countries: countries,\n        loading: loading,\n        scrollTo: scrollTo,\n        error: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CountriesBoard, \"cF/PbbI5r3AawMt7xxOJ+fFKFy8=\");\n\n_c = CountriesBoard;\nexport default CountriesBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountriesBoard\");","map":{"version":3,"sources":["/Users/aniketbhavsar/Desktop/Code Challenage/MAYD/search-you-country/src/components/Countries Board/CountriesBoard.js"],"names":["useState","useRef","useEffect","NavBar","FilterMenuBar","CountryCardList","CountriesBoard","countries","homePage","darkMode","toggleMode","loading","error","searchCountryText","setSearchCountryText","region","setRegion","filteredCountries","setFilteredCountries","scrollTo","updatedFilterdCountries","tempFilteredCountries","filter","country","name","common","toLowerCase","includes","onSearchCountryChange","onRegionChange","inputRegion"],"mappings":"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","sourcesContent":["import { useState, useRef, useEffect } from 'react';\nimport NavBar from '../NavBar/NavBar';\nimport FilterMenuBar from './Filter Menu Bar/FilterMenuBar';\nimport CountryCardList from './Countries Cards List/CountryCardList';\nimport './CountriesBoard.scss';\n\nconst CountriesBoard = ({\n  countries,\n  homePage,\n  darkMode,\n  toggleMode,\n  loading,\n  error,\n}) => {\n  const [searchCountryText, setSearchCountryText] = useState('');\n  const [region, setRegion] = useState('');\n  const [filteredCountries, setFilteredCountries] = useState(null);\n  const scrollTo = useRef(null);\n\n  useEffect(() => {\n    /**\n     *  Method updated countries based on seach input and region selection\n     */\n    const updatedFilterdCountries = () => {\n      let tempFilteredCountries = countries.filter((country) => {\n        return country.name.common\n          .toLowerCase()\n          .includes(searchCountryText.toLowerCase());\n      });\n      if (region) {\n        tempFilteredCountries = tempFilteredCountries.filter((country) => {\n          return country.region.toLowerCase() === region.toLowerCase();\n        });\n      }\n      setFilteredCountries(tempFilteredCountries);\n    };\n    updatedFilterdCountries();\n  }, [searchCountryText, region, countries]);\n\n  const onSearchCountryChange = (country) => {\n    setSearchCountryText(country);\n  };\n\n  const onRegionChange = (inputRegion) => {\n    setRegion(inputRegion);\n  };\n\n  return (\n    <>\n      <header className='countriesBoard'>\n        <NavBar\n          homePage={homePage}\n          darkMode={darkMode}\n          toggleMode={toggleMode}\n        />\n        <FilterMenuBar\n          searchCountry={searchCountryText}\n          darkMode={darkMode}\n          regionFilter={region}\n          onSearchCountryChange={onSearchCountryChange}\n          onRegionChange={onRegionChange}\n          scrollTo={scrollTo}\n        />\n      </header>\n      <main\n        className={`container countriesBoard innerHeight ${\n          darkMode ? `dark` : `light`\n        }`}\n      >\n        <CountryCardList\n          filteredCountries={filteredCountries ? filteredCountries : countries}\n          darkMode={darkMode}\n          countries={countries}\n          loading={loading}\n          scrollTo={scrollTo}\n          error={error}\n        />\n      </main>\n    </>\n  );\n};\n\nexport default CountriesBoard;\n"]},"metadata":{},"sourceType":"module"}