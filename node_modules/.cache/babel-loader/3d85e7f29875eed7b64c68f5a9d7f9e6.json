{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport { COUNTRY_DETAILS_URL, BRITISH_TERRITORY } from '../constant';\nexport const useFetchByName = name => {\n  _s();\n\n  const [countryDetails, setCountryDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const countryDetailsUrl = `${COUNTRY_DETAILS_URL}/${name}`;\n  const isMounted = useRef(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      isMounted.current = true;\n      setLoading(true);\n\n      try {\n        const response = await fetch(countryDetailsUrl, {\n          method: 'GET'\n        });\n\n        if (isMounted.current) {\n          if (response.ok) {\n            setLoading(false);\n            response.json().then(data => {\n              if (name === BRITISH_TERRITORY) {\n                setCountryDetails(data.filter(country => country.cca3 === 'IOT'));\n              } else {\n                setCountryDetails(data);\n              }\n            });\n          } else {\n            throw new Error('Something went wrong' + response.status);\n          }\n        }\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    return () => isMounted.current = false;\n  }, [countryDetailsUrl, name]);\n  return {\n    countryDetails,\n    loading,\n    error\n  };\n};\n\n_s(useFetchByName, \"fI2euSlMThGRbx3pfKV+OlsSUgM=\");","map":{"version":3,"sources":["/Users/aniketbhavsar/Desktop/Code Challenage/MAYD/search-you-country/src/hooks/useFetchByName.js"],"names":["useEffect","useState","useRef","COUNTRY_DETAILS_URL","BRITISH_TERRITORY","useFetchByName","name","countryDetails","setCountryDetails","loading","setLoading","error","setError","countryDetailsUrl","isMounted","fetchData","current","response","fetch","method","ok","json","then","data","filter","country","cca3","Error","status","message"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,SAASC,mBAAT,EAA8BC,iBAA9B,QAAuD,aAAvD;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAAU;AAAA;;AACtC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAMY,iBAAiB,GAAI,GAAEV,mBAAoB,IAAGG,IAAK,EAAzD;AACA,QAAMQ,SAAS,GAAGZ,MAAM,CAAC,KAAD,CAAxB;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMe,SAAS,GAAG,YAAY;AAC5BD,MAAAA,SAAS,CAACE,OAAV,GAAoB,IAApB;AACAN,MAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,UAAI;AACF,cAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACL,iBAAD,EAAoB;AAC9CM,UAAAA,MAAM,EAAE;AADsC,SAApB,CAA5B;;AAIA,YAAIL,SAAS,CAACE,OAAd,EAAuB;AACrB,cAAIC,QAAQ,CAACG,EAAb,EAAiB;AACfV,YAAAA,UAAU,CAAC,KAAD,CAAV;AACAO,YAAAA,QAAQ,CAACI,IAAT,GAAgBC,IAAhB,CAAsBC,IAAD,IAAU;AAC7B,kBAAIjB,IAAI,KAAKF,iBAAb,EAAgC;AAC9BI,gBAAAA,iBAAiB,CACfe,IAAI,CAACC,MAAL,CAAaC,OAAD,IAAaA,OAAO,CAACC,IAAR,KAAiB,KAA1C,CADe,CAAjB;AAGD,eAJD,MAIO;AACLlB,gBAAAA,iBAAiB,CAACe,IAAD,CAAjB;AACD;AACF,aARD;AASD,WAXD,MAWO;AACL,kBAAM,IAAII,KAAJ,CAAU,yBAAyBV,QAAQ,CAACW,MAA5C,CAAN;AACD;AACF;AACF,OArBD,CAqBE,OAAOjB,KAAP,EAAc;AACdC,QAAAA,QAAQ,CAACD,KAAK,CAACkB,OAAP,CAAR;AACAnB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,KA5BD;;AA6BAK,IAAAA,SAAS;AACT,WAAO,MAAOD,SAAS,CAACE,OAAV,GAAoB,KAAlC;AACD,GAhCQ,EAgCN,CAACH,iBAAD,EAAoBP,IAApB,CAhCM,CAAT;AAkCA,SAAO;AAAEC,IAAAA,cAAF;AAAkBE,IAAAA,OAAlB;AAA2BE,IAAAA;AAA3B,GAAP;AACD,CA1CM;;GAAMN,c","sourcesContent":["import { useEffect, useState, useRef } from 'react';\nimport { COUNTRY_DETAILS_URL, BRITISH_TERRITORY } from '../constant';\n\nexport const useFetchByName = (name) => {\n  const [countryDetails, setCountryDetails] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const countryDetailsUrl = `${COUNTRY_DETAILS_URL}/${name}`;\n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      isMounted.current = true;\n      setLoading(true);\n      try {\n        const response = await fetch(countryDetailsUrl, {\n          method: 'GET',\n        });\n\n        if (isMounted.current) {\n          if (response.ok) {\n            setLoading(false);\n            response.json().then((data) => {\n              if (name === BRITISH_TERRITORY) {\n                setCountryDetails(\n                  data.filter((country) => country.cca3 === 'IOT')\n                );\n              } else {\n                setCountryDetails(data);\n              }\n            });\n          } else {\n            throw new Error('Something went wrong' + response.status);\n          }\n        }\n      } catch (error) {\n        setError(error.message);\n        setLoading(false);\n      }\n    };\n    fetchData();\n    return () => (isMounted.current = false);\n  }, [countryDetailsUrl, name]);\n\n  return { countryDetails, loading, error };\n};\n"]},"metadata":{},"sourceType":"module"}